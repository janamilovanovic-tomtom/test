# Copyright (C) 2022 TomTom NV. All rights reserved.

---

name: Deploy Markdown to GitHub Pages
# Publishes to: http://username.github.io/repository.
# Docs: https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#publishing-with-a-custom-github-actions-workflow
# To enable gh-pages: https://pages.github.com/
#   goto:
#    - repo settings
#    - Pages
#    - Build and deployment -> Source: select GitHub Actions

on:
  workflow_call:
    inputs:
      src_dir:
        description: root of path of Markdown files to recursively build HTML from
        required: true
        type: string
      build_dir:
        description: root of path to recursively publish static HTML from
        required: true
        type: string

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    name: Deploy Markdown to GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install markdown

      - name: Generate HTML from Markdown
        run: python3 .github/workflow_scripts/generate_html.py "${{ inputs.src_dir }}" "${{ inputs.build_dir }}"

      - name: Fix ownership of HTML files
        run: sudo chown -hR "$(id -un):$(id -gn)"  "${{ inputs.build_dir }}"

      - name: Copy assets
        run: rsync -akv --exclude='.*' --exclude='**/*.md' "${{ inputs.src_dir }}"/ "${{ inputs.build_dir }}"/

      - name: Create ZIP archive
        run: zip -r my_archive.zip "${{ inputs.build_dir }}"/

      - name: Create upload session
        id: create_upload_session
        env:
          ACCESS_TOKEN: ${{ secrets.SP_ACCESS_TOKEN }}
          DRIVE_ID: ${{ secrets.DRIVE_ID }}
          FILE_NAME: 'my_archive.zip'
          FOLDER_NAME: 'nie-ux-spec'
        run: |
          upload_session=$(curl -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
                  "item": {
                    "@microsoft.graph.conflictBehavior": "replace",
                    "name": "'"$FILE_NAME"'"
                  }
                }' \
            "https://graph.microsoft.com/v1.0/drives/$DRIVE_ID/root:/$FOLDER_NAME/$FILE_NAME:/createUploadSession")
          
          # Extract the upload URL and write to an environment file
          echo "UPLOAD_URL=$(echo $upload_session | jq -r .uploadUrl)" >> $GITHUB_ENV

      - name: Upload file in chunks
        env:
          ACCESS_TOKEN: ${{ secrets.SP_ACCESS_TOKEN }}
          UPLOAD_URL: ${{ env.UPLOAD_URL }}
        run: |
          # Define the chunk size
          chunk_size=20971520  # 20 MB
          total_size=$(stat -c%s "my_archive.zip")
          offset=0
          
          while [ $offset -lt $total_size ]; do
              end=$((offset + chunk_size - 1))
              if [ $end -ge $total_size ]; then
                  end=$((total_size - 1))
              fi
          
              # Calculate the range
              content_range="bytes $offset-$end/$total_size"
          
              # Create the chunk using dd
              dd if=my_archive.zip bs=1 skip=$offset count=$((end - offset + 1)) status=none | curl -X PUT \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Range: $content_range" \
                --data-binary @- \
                "$UPLOAD_URL"
          
              offset=$((offset + chunk_size))
          done